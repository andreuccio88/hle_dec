Sullivan.fun = function (rates,age=seq(start.age,open.age,5), sex='f') {
# 1) First, we split from our single vector 'rates' the set of age-specific death rates (mx) and age-specific prevalence of disability (wx)
lengthvec <- length(rates)
mx <- rates[1:(lengthvec / 2)]
wx <- rates[(lengthvec / 2 + 1):lengthvec]
# 2) Calculating period life table functions
# ax
n <- c(diff(age), 1)
ax <- 0.5 * n
# This part of the code is only for calculations when the
# starting age is zero.
# Formulas are from Andreev & Kingkade (2015)
#---------------------------------------------------------
if (age[1] == 0) {
if (sex == 'm') {
ax[1] <- ifelse(mx[1] >= 0.08307,0.29915,
ifelse(mx[1] < 0.023,
0.14929 - 1.99545 * mx[1],
0.02832 + 3.26021 * mx[1] ))}
if (sex == 'f') {
ax[1] <- ifelse(mx[1] >= 0.06891,0.31411,
ifelse(mx[1] < 0.01724,
0.14903 - 2.05527 * mx[1],
0.04667 + 3.88089 * mx[1] ))} }
#---------------------------------------------------------
# probability of dying (qx) and surviving (px)
qx <- (n * mx)/(1 + (n - ax) * mx)
qx <- c(qx[-(length(qx))], 1)
qx[qx > 1] <- 1
px <- 1 - qx
# survivors at age x (lx)
lx <- c(100000,rep(0,(length(mx)-1)))
for (i in 1:(length(mx) -1)){
lx[i+1] <- lx[i]*px[i] }
# deaths between ages x and x+n (dx)
dx <- lx * qx
# person-years lived between ages x and x+n (Lx)
Lx <- rep(0,length(mx))
for (i in 1:length(mx) -1){
Lx[i] <- lx[i+1]*n[i] + ax[i]*dx[i] }
Lx[length(mx)] <- lx[length(mx)]/mx[length(mx)]
# 3) Person-years lived without disability
Lx.health <- Lx*(1-wx)
# 4) Healthy Life expectancy at age 0
ex.health <- sum(Lx.health)/lx[1]
return(ex.health)
}
# Defining the variables for the start of the first interval, the start
of the open-aged interval, and the years
start.age = 65
open.age = 85
year1 = 1970; year2 = 1990
# To extract data from the HMD, you first need to register at
www.mortality.org. Replace your username and password here:
library(HMDHFDplus)
library(tidyverse)
myusername <- "andrea.nigri@student.unisi.it"
mypassword <- "Dottorato17"
# Preparing the inputs for the arguments rates, pars1 and pars2
# 1) Selecting the country
country <- "USA"
# 2) Extracting Female Life Tables from HMD
LTF<- readHMDweb (CNTRY = country,
item = "fltper_5x1",
username = myusername,
password = mypassword,
fixup = TRUE)
library(MortalityLaws)
HMD_Ex <-  ReadHMD(what = 'mx',
interval = '1x1',
username = "andrea.nigri@student.unisi.it",
password = "Dottorato17",
save = FALSE)
install.packages("MortalityLaws")
install.packages("MortalityLaws")
library(MortalityLaws)
HMD_Ex <-  ReadHMD(what = 'mx',
interval = '1x1',
username = "andrea.nigri@student.unisi.it",
password = "Dottorato17",
save = FALSE)
devtools::install_github("mpascariu/MortalityLaws")
library(MortalityLaws)
HMD_Ex <-  ReadHMD(what = 'mx',
interval = '1x1',
username = "andrea.nigri@student.unisi.it",
password = "Dottorato17",
save = FALSE)
library(HMDHFDplus)
library(tidyverse)
myusername <- "andrea.nigri@student.unisi.it"
mypassword <- "Dottorato17"
# Preparing the inputs for the arguments rates, pars1 and pars2
# 1) Selecting the country
country <- "USA"
# 2) Extracting Female Life Tables from HMD
LTF<- readHMDweb (CNTRY = country,
item = "fltper_5x1",
username = myusername,
password = mypassword,
fixup = TRUE)
LTF
# 4) Extracting Exposures from HMD
Nx<- readHMDweb(CNTRY = country,
item = "cMx_1x1",
username = myusername,
password = mypassword,
fixup = TRUE)
Nx
tail(nX)
tail(Nx)
# 4) Extracting Exposures from HMD
Nx<- readHMDweb(CNTRY = country,
item = "Mx_1x1",
username = myusername,
password = mypassword,
fixup = TRUE)
tail(Nx)
# 4) Extracting Exposures from HMD
Mx<- readHMDweb(
item = "Mx_1x1",
username = myusername,
password = mypassword,
fixup = TRUE)
country <- c(AUS, AUT,BEL, BGR, BLR, CAN, CHL, HRV, HKG)
country <- c("AUS", "AUT","BEL", "BGR", "BLR", "CAN", "CHL", "HRV","HKG")
Mx<- readHMDweb(CNTRY = country,
item = "Mx_1x1",
username = myusername,
password = mypassword,
fixup = TRUE)
country
library(HMDHFDplus)
library(tidyverse)
library(purrr)
# help function to list the available countries
country <- getHMDcountries()
country
# remove optional populations
opt_pop <- c("FRACNP", "DEUTE", "DEUTW", "GBRCENW", "GBR_NP")
country <- country[!country %in% opt_pop]
# temporary function to download HMD data for a simgle county (dot = input)
tempf_get_hmd <- . %>% readHMDweb("Mx_1x1", myusername, mypassword)
# download the data iteratively for all countries using purrr::map()
Mx<- country %>% map(tempf_get_hmd)
Mx
# data transformation to apply to each county dataframe
tempf_trans_data <- . %>%
select(Year, Age, Female, Male) %>%
filter(Year %in% 2012) %>%
select(-Year) %>%
transmute(age = Age, ratio = Male / Female * 100)
# perform transformation
df_hmd <- Mx %>%
map(tempf_trans_data) %>%
bind_rows(.id = "country")
df_hmd
# data transformation to apply to each county dataframe
tempf_trans_data <- . %>%
select(Year, Age, Female, Male) %>%
filter(Year %in% 2012) %>%
select(-Year) %>%
# perform transformation
df_hmd <- Mx %>%
map(tempf_trans_data) %>%
bind_rows(.id = "country")
# data transformation to apply to each county dataframe
tempf_trans_data <- . %>%
select(Year, Age, Female, Male) %>%
filter(Year %in% 2012) %>%
select(-Year)
# perform transformation
df_hmd <- Mx %>%
map(tempf_trans_data) %>%
bind_rows(.id = "country")
df_hmd
Mx
