lx.health*log(lx.health)
-lx.health*-log(lx.health)
sum(-lx.health*-log(lx.health))/lx[1]
sum(dx.health*ex.health)/lx[1]
lx.health
log(lx.health)
lengthvec <- length(rates)
mx <- rates[1:(lengthvec / 2)]
wx <- rates[(lengthvec / 2 + 1):lengthvec]
n <- c(diff(age), 1)
ax <- 0.5 * n
#---------------------------------------------------------
if (age[1] == 0) {
if (sex == 'm') {
ax[1] <- ifelse(mx[1] >= 0.08307,0.29915,
ifelse(mx[1] < 0.023,
0.14929 - 1.99545 * mx[1],
0.02832 + 3.26021 * mx[1] ))}
if (sex == 'f') {
ax[1] <- ifelse(mx[1] >= 0.06891,0.31411,
ifelse(mx[1] < 0.01724,
0.14903 - 2.05527 * mx[1],
0.04667 + 3.88089 * mx[1] ))} }
qx <- (n * mx)/(1 + (n - ax) * mx)
qx <- c(qx[-(length(qx))], 1)
qx[qx > 1] <- 1
px <- 1 - qx
# survivors at age x (lx)
lx <- c(100000,rep(0,(length(mx)-1)))
for (i in 1:(length(mx) -1)){
lx[i+1] <- lx[i]*px[i] }
# deaths between ages x and x+n (dx)
dx <- lx * qx
Lx <- rep(0,length(mx))
for (i in 1:length(mx) -1){
Lx[i] <- lx[i+1]*n[i] + ax[i]*dx[i] }
Lx[length(mx)] <- lx[length(mx)]/mx[length(mx)]
Lx.health <- Lx*(1-wx)
ex.health <- sum(Lx.health)/lx[1]
ex.health
e0 <- sum(Lx)/lx[1] questa è life exp ed ottengo lo stesso valore 18.87073 della funzione usata nel paper con Josè
e0 <- sum(Lx)/lx[1] questa è life exp ed ottengo lo stesso valore 18.87073 della funzione usata nel paper con Josè
e0 <- sum(Lx)/lx[1] #questa è life exp ed ottengo lo stesso valore 18.87073 della funzione usata nel paper con Josè
e0
ex.health
Lx.health <- Lx*(1-wx)
ex.health <- sum(Lx.health)/lx[1]
ex.health
e0 <- sum(Lx)/lx[1] #questa è life exp ed ottengo lo stesso valore 18.87073 della funzione usata nel paper con Josè
e0
sum(Lx)/lx
lx
Lx.health <- Lx*(1-wx)
ex.health <- sum(Lx.health)/lx[1]
ex.health
sum(Lx.health)/lx
sum(-lx*-log(lx))/lx[1]
dx
lx
-lx
dx
Lx
sum(-Lx*-log(Lx))/lx[1]
sum(Lx*log(Lx))/lx[1]
-sum(Lx*log(Lx))/lx[1]
Lx
sum(-Lx*log(Lx))/lx[1]
sum(-Lx*-log(Lx))/lx[1]
diff(lx)
diff(-lx)
dx
ex
sum(-lx.health*-log(lx.health))/lx[1]
sum(-Lx*-log(Lx))/lx[1]
sum(-lx*-log(lx))/lx[1]
lx
sum(-lx*-log(lx))/lx[1]
sum(-Lx*-log(Lx))/lx[1]
sum(-lx.health*-log(lx.health))/lx[1]
sum(-Lx*-log(Lx))/lx[1]
Lx.health <- Lx*(1-wx)
ex.health <- sum(Lx.health)/lx[1]
ex.health
e0
sum(Lx)/lx
hle.plus_edagg_fun_oct_22 = function (rates,age=seq(start.age,open.age,5), sex='f') {
lengthvec <- length(rates)
mx <- rates[1:(lengthvec / 2)]
wx <- rates[(lengthvec / 2 + 1):lengthvec]
n <- c(diff(age), 1)
ax <- 0.5 * n
#---------------------------------------------------------
if (age[1] == 0) {
if (sex == 'm') {
ax[1] <- ifelse(mx[1] >= 0.08307,0.29915,
ifelse(mx[1] < 0.023,
0.14929 - 1.99545 * mx[1],
0.02832 + 3.26021 * mx[1] ))}
if (sex == 'f') {
ax[1] <- ifelse(mx[1] >= 0.06891,0.31411,
ifelse(mx[1] < 0.01724,
0.14903 - 2.05527 * mx[1],
0.04667 + 3.88089 * mx[1] ))} }
qx <- (n * mx)/(1 + (n - ax) * mx)
qx <- c(qx[-(length(qx))], 1)
qx[qx > 1] <- 1
px <- 1 - qx
# survivors at age x (lx)
lx <- c(100000,rep(0,(length(mx)-1)))
for (i in 1:(length(mx) -1)){
lx[i+1] <- lx[i]*px[i] }
# deaths between ages x and x+n (dx)
dx <- lx * qx
Lx <- rep(0,length(mx))
for (i in 1:length(mx) -1){
Lx[i] <- lx[i+1]*n[i] + ax[i]*dx[i] }
Lx[length(mx)] <- lx[length(mx)]/mx[length(mx)]
# e0 <- sum(Lx)/lx[1] questa è life exp ed ottengo lo stesso valore 18.87073 della funzione usata nel paper con Josè
Lx.health <- Lx*(1-wx)
ex.health <- sum(Lx.health)/lx[1]
##############################################################
# e-dagger
lx <- c(100000,rep(0,(length(mx)-1)))
for (i in 1:(length(mx) -1)){
lx[i+1] <- lx[i]*px[i] }
lx.health <- lx*(1-wx)
dx.health <- lx.health * qx
ed.health <- sum(dx.health*ex.health)/lx[1] # check and consider if this might be /lx.health[1]
return(c(ex.health,ed.health))
}
lx <- c(100000,rep(0,(length(mx)-1)))
for (i in 1:(length(mx) -1)){
lx[i+1] <- lx[i]*px[i] }
hle.plus_edagg_fun_oct_22 = function (rates,age=seq(start.age,open.age,5), sex='f') {
lengthvec <- length(rates)
mx <- rates[1:(lengthvec / 2)]
wx <- rates[(lengthvec / 2 + 1):lengthvec]
n <- c(diff(age), 1)
ax <- 0.5 * n
#---------------------------------------------------------
if (age[1] == 0) {
if (sex == 'm') {
ax[1] <- ifelse(mx[1] >= 0.08307,0.29915,
ifelse(mx[1] < 0.023,
0.14929 - 1.99545 * mx[1],
0.02832 + 3.26021 * mx[1] ))}
if (sex == 'f') {
ax[1] <- ifelse(mx[1] >= 0.06891,0.31411,
ifelse(mx[1] < 0.01724,
0.14903 - 2.05527 * mx[1],
0.04667 + 3.88089 * mx[1] ))} }
qx <- (n * mx)/(1 + (n - ax) * mx)
qx <- c(qx[-(length(qx))], 1)
qx[qx > 1] <- 1
px <- 1 - qx
# survivors at age x (lx)
lx <- c(100000,rep(0,(length(mx)-1)))
for (i in 1:(length(mx) -1)){
lx[i+1] <- lx[i]*px[i] }
# deaths between ages x and x+n (dx)
dx <- lx * qx
Lx <- rep(0,length(mx))
for (i in 1:length(mx) -1){
Lx[i] <- lx[i+1]*n[i] + ax[i]*dx[i] }
Lx[length(mx)] <- lx[length(mx)]/mx[length(mx)]
# e0 <- sum(Lx)/lx[1] questa è life exp ed ottengo lo stesso valore 18.87073 della funzione usata nel paper con Josè
Lx.health <- Lx*(1-wx)
ex.health <- sum(Lx.health)/lx[1]
##############################################################
# e-dagger
lx <- c(100000,rep(0,(length(mx)-1)))
for (i in 1:(length(mx) -1)){
lx[i+1] <- lx[i]*px[i] }
lx.health <- lx*(1-wx)
dx.health <- lx.health * qx
ed.health <- sum(dx.health*ex.health)/lx[1] # check and consider if this might be /lx.health[1]
return(c(ex.health,ed.health))
}
# Defining the variables for the start of the first interval, the start of the open-aged interval, and the years
start.age = 65
open.age = 85
year1 = 1990; year2 = 2019
library(HMDHFDplus)
library(tidyverse)
load("LTF.RData")
load("Dx.RData")
load("Ex.RData")
mx1 <- filter(LTF,Year==1990 & Age >=65)$mx
mx2 <- filter(LTF,Year==2019 & Age >=65)$mx
Dx1 <- filter(Dx,Year==1990)$Total
Dx2 <- filter(Dx,Year==2019)$Total
Nx1 <- filter(Nx,Year==1990)$Total
Nx2 <- filter(Nx,Year==2019)$Total
# y is the last position in the mx1 and mx2 vectors
y = length(seq(start.age,open.age,5))
mx1[y] <- sum(Dx1[19:24])/sum(Nx1[19:24])
mx2[y] <- sum(Dx2[19:24])/sum(Nx2[19:24])
mx1 <- mx1[1:y]
mx2 <- mx2[1:y]
wx1 <- c(0.3000,0.3657,0.4552, 0.5285,
0.6822)
wx2 <- c(0.3056,0.3831,0.4552, 0.5424,
0.6441)
mxwx1 <- c(mx1,wx1)
mxwx2 <- c(mx2,wx2)
hle.plus_edagg_fun_oct_22(rates=mxwx1,age =seq(start.age,open.age,5), sex='f')
hle.fun(rates=mxwx1,age =seq(start.age,open.age,5), sex='f' )
hle.fun = function (rates,age=seq(start.age,open.age,5), sex='f') {
lengthvec <- length(rates)
mx <- rates[1:(lengthvec / 2)]
wx <- rates[(lengthvec / 2 + 1):lengthvec]
n <- c(diff(age), 1)
ax <- 0.5 * n
#---------------------------------------------------------
if (age[1] == 0) {
if (sex == 'm') {
ax[1] <- ifelse(mx[1] >= 0.08307,0.29915,
ifelse(mx[1] < 0.023,
0.14929 - 1.99545 * mx[1],
0.02832 + 3.26021 * mx[1] ))}
if (sex == 'f') {
ax[1] <- ifelse(mx[1] >= 0.06891,0.31411,
ifelse(mx[1] < 0.01724,
0.14903 - 2.05527 * mx[1],
0.04667 + 3.88089 * mx[1] ))} }
qx <- (n * mx)/(1 + (n - ax) * mx)
qx <- c(qx[-(length(qx))], 1)
qx[qx > 1] <- 1
px <- 1 - qx
# survivors at age x (lx)
lx <- c(100000,rep(0,(length(mx)-1)))
for (i in 1:(length(mx) -1)){
lx[i+1] <- lx[i]*px[i] }
# deaths between ages x and x+n (dx)
dx <- lx * qx
Lx <- rep(0,length(mx))
for (i in 1:length(mx) -1){
Lx[i] <- lx[i+1]*n[i] + ax[i]*dx[i] }
Lx[length(mx)] <- lx[length(mx)]/mx[length(mx)]
# e0 <- sum(Lx)/lx[1] questa è life exp ed ottengo lo stesso valore 18.87073 della funzione usata nel paper con Josè
Lx.health <- Lx*(1-wx)
ex.health <- sum(Lx.health)/lx[1]
return(ex.health)
}
H_edagger.fun = function (rates,age=seq(start.age,open.age,5), sex='f') {
lengthvec <- length(rates)
mx <- rates[1:(lengthvec / 2)]
wx <- rates[(lengthvec / 2 + 1):lengthvec]
n <- c(diff(age), 1)
ax <- 0.5 * n
#---------------------------------------------------------
if (age[1] == 0) {
if (sex == 'm') {
ax[1] <- ifelse(mx[1] >= 0.08307,0.29915,
ifelse(mx[1] < 0.023,
0.14929 - 1.99545 * mx[1],
0.02832 + 3.26021 * mx[1] ))}
if (sex == 'f') {
ax[1] <- ifelse(mx[1] >= 0.06891,0.31411,
ifelse(mx[1] < 0.01724,
0.14903 - 2.05527 * mx[1],
0.04667 + 3.88089 * mx[1] ))} }
qx <- (n * mx)/(1 + (n - ax) * mx)
qx <- c(qx[-(length(qx))], 1)
qx[qx > 1] <- 1
px <- 1 - qx
# survivors at age x (lx)
lx <- c(100000,rep(0,(length(mx)-1)))
for (i in 1:(length(mx) -1)){
lx[i+1] <- lx[i]*px[i] }
lx.health <- lx*(1-wx)
dx.health <- lx.health * qx
Lx <- rep(0,length(mx))
for (i in 1:length(mx) -1){
Lx[i] <- lx.health[i+1]*n[i] + ax[i]*dx.health[i] }
Lx[length(mx)] <- lx.health[length(mx)]/mx[length(mx)]
Lx.health <- Lx
ex.health <- sum(Lx.health)/lx.health[1]
ed.health <- sum(dx.health*ex.health)/lx[1] # check and consider if this might be /lx.health[1]
return(ed.health)
}
hle.plus_edagg_fun_oct_22(rates=mxwx1,age =seq(start.age,open.age,5), sex='f')
hle.fun(rates=mxwx1,age =seq(start.age,open.age,5), sex='f' )
H_edagger.fun(rates=mxwx1,age =seq(start.age,open.age,5), sex='f' )
# Defining the variables for the start of the first interval, the start of the open-aged interval, and the years
start.age = 65
open.age = 85
year1 = 1990; year2 = 2019
library(HMDHFDplus)
library(tidyverse)
wx1 <- c(7.79, 8.76, 9.17, 7.84, 6.80)/100
wx2 <- c(9.87, 11.58, 12.73, 12.13, 9.73)/100
mxwx1 <- c(mx1,wx1)
mxwx2 <- c(mx2,wx2)
Sullivan.fun(rates=mxwx1,age =seq(start.age,open.age,5), sex='f' )
hle.plus_edagg_fun_oct_22(rates=mxwx1,age =seq(start.age,open.age,5), sex='f')
hle.fun(rates=mxwx1,age =seq(start.age,open.age,5), sex='f' )
H_edagger.fun(rates=mxwx1,age =seq(start.age,open.age,5), sex='f' )
hle.plus_edagg_fun_oct_22(rates=mxwx1,age =seq(start.age,open.age,5), sex='f')
hle.fun(rates=mxwx1,age =seq(start.age,open.age,5), sex='f' )
H_edagger.fun(rates=mxwx1,age =seq(start.age,open.age,5), sex='f' )
lx[1]
start.age
lengthvec <- length(rates)
rates
rates=mxwx1
age =seq(start.age,open.age,5)
sex='f'
lengthvec <- length(rates)
mx <- rates[1:(lengthvec / 2)]
wx <- rates[(lengthvec / 2 + 1):lengthvec]
n <- c(diff(age), 1)
ax <- 0.5 * n
#---------------------------------------------------------
if (age[1] == 0) {
if (sex == 'm') {
ax[1] <- ifelse(mx[1] >= 0.08307,0.29915,
ifelse(mx[1] < 0.023,
0.14929 - 1.99545 * mx[1],
0.02832 + 3.26021 * mx[1] ))}
if (sex == 'f') {
ax[1] <- ifelse(mx[1] >= 0.06891,0.31411,
ifelse(mx[1] < 0.01724,
0.14903 - 2.05527 * mx[1],
0.04667 + 3.88089 * mx[1] ))} }
qx <- (n * mx)/(1 + (n - ax) * mx)
qx <- c(qx[-(length(qx))], 1)
qx[qx > 1] <- 1
px <- 1 - qx
# survivors at age x (lx)
lx <- c(100000,rep(0,(length(mx)-1)))
for (i in 1:(length(mx) -1)){
lx[i+1] <- lx[i]*px[i] }
# deaths between ages x and x+n (dx)
dx <- lx * qx
Lx <- rep(0,length(mx))
for (i in 1:length(mx) -1){
Lx[i] <- lx[i+1]*n[i] + ax[i]*dx[i] }
dx
Lx <- rep(0,length(mx))
for (i in 1:length(mx) -1){
Lx[i] <- lx[i+1]*n[i] + ax[i]*dx[i] }
Lx[length(mx)] <- lx[length(mx)]/mx[length(mx)]
Lx.health <- Lx*(1-wx)
ex.health <- sum(Lx.health)/lx[1]
lx <- c(100000,rep(0,(length(mx)-1)))
for (i in 1:(length(mx) -1)){
lx[i+1] <- lx[i]*px[i] }
lx.health <- lx*(1-wx)
dx.health <- lx.health * qx
dx.health
sd(dx.health)
sd(dx.health)/lx[1]
sd(dx.health)/lx[1]
sd(dx.health)
dx.health
var(dx.health)
dx.health
var(dx.health)/lx[1]
hle.plus_edagg_fun_oct_22(rates=mxwx1,age =seq(start.age,open.age,5), sex='f')
hle.fun(rates=mxwx1,age =seq(start.age,open.age,5), sex='f' )
H_edagger.fun(rates=mxwx1,age =seq(start.age,open.age,5), sex='f' )
# Approccio combinato fatto ad Aarhus
hle.plus_edagg = function (rates,age=seq(start.age,open.age,5), sex='f') {
lengthvec <- length(rates)
mx <- rates[1:(lengthvec / 2)]
wx <- rates[(lengthvec / 2 + 1):lengthvec]
n <- c(diff(age), 1)
ax <- 0.5 * n
#---------------------------------------------------------
if (age[1] == 0) {
if (sex == 'm') {
ax[1] <- ifelse(mx[1] >= 0.08307,0.29915,
ifelse(mx[1] < 0.023,
0.14929 - 1.99545 * mx[1],
0.02832 + 3.26021 * mx[1] ))}
if (sex == 'f') {
ax[1] <- ifelse(mx[1] >= 0.06891,0.31411,
ifelse(mx[1] < 0.01724,
0.14903 - 2.05527 * mx[1],
0.04667 + 3.88089 * mx[1] ))} }
qx <- (n * mx)/(1 + (n - ax) * mx)
qx <- c(qx[-(length(qx))], 1)
qx[qx > 1] <- 1
px <- 1 - qx
# survivors at age x (lx)
lx <- c(100000,rep(0,(length(mx)-1)))
for (i in 1:(length(mx) -1)){
lx[i+1] <- lx[i]*px[i] }
# deaths between ages x and x+n (dx)
dx <- lx * qx
Lx <- rep(0,length(mx))
for (i in 1:length(mx) -1){
Lx[i] <- lx[i+1]*n[i] + ax[i]*dx[i] }
Lx[length(mx)] <- lx[length(mx)]/mx[length(mx)]
# e0 <- sum(Lx)/lx[1] questa è life exp ed ottengo lo stesso valore 18.87073 della funzione usata nel paper con Josè
Lx.health <- Lx*(1-wx)
ex.health <- sum(Lx.health)/lx[1]
#####################
# e-dagger:
# see, Permanyer et al. Population Health Metrics (2022); paragraph Estimating health distributions.
# The author suggest - Multiplying the lx column of the life table (showing the number of survivors at
# age x ) by 1 − wx (the percent of population at age x not limited to carry out daily activities)
# we obtain lx' : the   number of healthy survivors at age x . This is the so-called  ‘morbidity curve’.
# From the lx and lx' columns we derive the standard dx and dx' distributions
#####################
lx <- c(100000,rep(0,(length(mx)-1)))
for (i in 1:(length(mx) -1)){
lx[i+1] <- lx[i]*px[i] }
lx.health <- lx*(1-wx)
dx.health <- lx.health * qx
# Healty e-dagger at age x
ed.health <- sum(dx.health*ex.health)/lx[1]
return(c(ex.health,ed.health))
}
# Data from example A. A. van Raalte and M. R. Nepomuceno
mx1 <- c(0.0204, 0.0325, 0.0533, 0.0867,
0.1640)
mx2 <- c(0.0161, 0.0246, 0.0384, 0.0646,
0.1410)
wx1 <- c(0.3000,0.3657,0.4552, 0.5285,
0.6822)
wx2 <- c(0.3056,0.3831,0.4552, 0.5424,
0.6441)
# Making a single vector of mx followed by wx - we need these as input for either horiuchi or stepwise_replacement
mxwx1 <- c(mx1,wx1)
mxwx2 <- c(mx2,wx2)
hle.plus.edagg = function (rates,age=seq(start.age,open.age,5), sex='f') {
lengthvec <- length(rates)
mx <- rates[1:(lengthvec / 2)]
wx <- rates[(lengthvec / 2 + 1):lengthvec]
n <- c(diff(age), 1)
ax <- 0.5 * n
#---------------------------------------------------------
if (age[1] == 0) {
if (sex == 'm') {
ax[1] <- ifelse(mx[1] >= 0.08307,0.29915,
ifelse(mx[1] < 0.023,
0.14929 - 1.99545 * mx[1],
0.02832 + 3.26021 * mx[1] ))}
if (sex == 'f') {
ax[1] <- ifelse(mx[1] >= 0.06891,0.31411,
ifelse(mx[1] < 0.01724,
0.14903 - 2.05527 * mx[1],
0.04667 + 3.88089 * mx[1] ))} }
qx <- (n * mx)/(1 + (n - ax) * mx)
qx <- c(qx[-(length(qx))], 1)
qx[qx > 1] <- 1
px <- 1 - qx
# survivors at age x (lx)
lx <- c(100000,rep(0,(length(mx)-1)))
for (i in 1:(length(mx) -1)){
lx[i+1] <- lx[i]*px[i] }
# deaths between ages x and x+n (dx)
dx <- lx * qx
Lx <- rep(0,length(mx))
for (i in 1:length(mx) -1){
Lx[i] <- lx[i+1]*n[i] + ax[i]*dx[i] }
Lx[length(mx)] <- lx[length(mx)]/mx[length(mx)]
# e0 <- sum(Lx)/lx[1] questa è life exp ed ottengo lo stesso valore 18.87073 della funzione usata nel paper con Josè
Lx.health <- Lx*(1-wx)
ex.health <- sum(Lx.health)/lx[1]
#####################
# e-dagger:
# see, Permanyer et al. Population Health Metrics (2022); paragraph Estimating health distributions.
# The author suggest - Multiplying the lx column of the life table (showing the number of survivors at
# age x ) by 1 − wx (the percent of population at age x not limited to carry out daily activities)
# we obtain lx' : the   number of healthy survivors at age x . This is the so-called  ‘morbidity curve’.
# From the lx and lx' columns we derive the standard dx and dx' distributions
#####################
lx <- c(100000,rep(0,(length(mx)-1)))
for (i in 1:(length(mx) -1)){
lx[i+1] <- lx[i]*px[i] }
lx.health <- lx*(1-wx)
dx.health <- lx.health * qx
# Healty e-dagger at age x
ed.health <- sum(dx.health*ex.health)/lx[1]
return(c(ex.health,ed.health))
}
mx1 <- c(0.0204, 0.0325, 0.0533, 0.0867,
0.1640)
mx2 <- c(0.0161, 0.0246, 0.0384, 0.0646,
0.1410)
wx1 <- c(0.3000,0.3657,0.4552, 0.5285,
0.6822)
wx2 <- c(0.3056,0.3831,0.4552, 0.5424,
0.6441)
# Making a single vector of mx followed by wx - we need these as input for either horiuchi or stepwise_replacement
mxwx1 <- c(mx1,wx1)
mxwx2 <- c(mx2,wx2)
hle.plus.edagg(rates=mxwx1)
# Defining the variables for the start of the first interval, the start of the open-aged interval, and the years
start.age = 65
open.age = 85
year1 = 1970; year2 = 1990
mx1 <- c(0.0204, 0.0325, 0.0533, 0.0867,
0.1640)
mx2 <- c(0.0161, 0.0246, 0.0384, 0.0646,
0.1410)
wx1 <- c(0.3000,0.3657,0.4552, 0.5285,
0.6822)
wx2 <- c(0.3056,0.3831,0.4552, 0.5424,
0.6441)
# Making a single vector of mx followed by wx - we need these as input for either horiuchi or stepwise_replacement
mxwx1 <- c(mx1,wx1)
mxwx2 <- c(mx2,wx2)
hle.plus.edagg(rates=mxwx1)
Sullivan.fun(rates=mxwx1)
## [1] 9.691796
# In 1990 it was
Sullivan.fun(rates=mxwx2)
hle.plus.edagg(rates=mxwx2)
